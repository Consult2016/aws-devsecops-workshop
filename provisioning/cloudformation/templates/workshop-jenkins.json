{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS DevSecOps Workshop Environment + Jenkins (VPC+EC2 Instance)",
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Description": "EC2 Instance Type to deploy.",
      "Default": "t2.small"
    },
    "TrustedCIDR": {
      "Type": "String",
      "Description": "The CIDR block to allow SSH/HTTP access to Jenkins from.",
      "Default": "0.0.0.0/0"
    },
    "VpcCIDR": {
      "Type": "String",
      "Description": "The VPC CIDR block",
      "Default": "172.31.255.0/24"
    },
    "SubnetCIDR": {
      "Type": "String",
      "Description": "The VPC CIDR block",
      "Default": "172.31.255.0/25"
    },
    "RubygemsCIDR": {
      "Type": "String",
      "Description": "The CIDR block to allow HTTP access from Jenkins to.",
      "Default": "151.101.0.0/16"
    },
    "GithubCIDR": {
      "Type": "String",
      "Description": "The CIDR block to allow HTTP access from Jenkins to.",
      "Default": "192.30.252.0/22"
    },
    "AmazonCIDR1": {
      "Type": "String",
      "Description": "The Amazon CIDR block.",
      "Default": "54.224.0.0/12"
    },
    "AmazonCIDR2": {
      "Type": "String",
      "Description": "The Amazon CIDR block.",
      "Default": "52.192.0.0/11"
    },
    "UbuntuCIDR": {
      "Type": "String",
      "Description": "The Amazon CIDR block.",
      "Default": "0.0.0.0/0"
    },
    "TopLevelDomain": {
      "Type": "String",
      "Description": "The top level domain to add route53 entry to. This varies by account. Default is for stell-labs account.",
      "Default": "elasticoperations.com."
    },
    "JenkinsKeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Key Pair to use for Jenkins ssh authentication."
    }
  },
  "Resources": {
    "InternetGatewayStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/aws-devsecops-workshop/workshop-igw.template",
        "Parameters": {
          "ParentStackName": { "Ref": "AWS::StackName" },
          "VPC": { "Ref": "VPC" }
        },
        "TimeoutInMinutes": "10"
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Ref": "VpcCIDR" },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ]
      }
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Ref": "SubnetCIDR" },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ]
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "InternetGatewayStack",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Fn::GetAtt" : [ "InternetGatewayStack", "Outputs.Gateway" ] }
      }
    },
    "SubnetAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },
    "JenkinsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "AWS DevSecOps Workshop Jenkins",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": { "Ref": "TrustedCIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": { "Ref": "TrustedCIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "TrustedCIDR" }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "SubnetCIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": { "Ref": "RubygemsCIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "GithubCIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": { "Ref": "GithubCIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": { "Ref": "AmazonCIDR1" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": { "Ref": "AmazonCIDR2" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": { "Ref": "UbuntuCIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": { "Ref": "UbuntuCIDR" }
          }
        ]
      }
    },
    "JenkinsConnector": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "AWS DevSecOps Workshop Jenkins Connector",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": { "Ref": "JenkinsSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": { "Ref": "JenkinsSecurityGroup" }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "DestinationSecurityGroupId": { "Ref": "JenkinsSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "DestinationSecurityGroupId": { "Ref": "JenkinsSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "DestinationSecurityGroupId": { "Ref": "JenkinsSecurityGroup" }
          }
        ]
      }
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "JenkinsWaiter": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "JenkinsServer",
      "Properties": {
        "Handle": { "Ref": "WaitHandle" },
        "Timeout": "900"
      }
    },
    "JenkinsServer": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "InternetGatewayStack",
      "Properties": {
        "ImageId": "ami-fb5686ed",
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "JenkinsKeyName" },
        "IamInstanceProfile": { "Ref": "JenkinsInstanceProfile" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": true,
            "DeleteOnTermination": true,
            "SubnetId": { "Ref": "Subnet" },
            "DeviceIndex": 0,
            "GroupSet": [ { "Ref": "JenkinsSecurityGroup" } ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " - ",
                [
                  "AWS DevSecOps Workshop - Jenkins",
                  { "Ref": "AWS::StackName" },
                  "UBUNTU"
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "set -ex\n",
                "export wait_handle=\"", { "Ref": "WaitHandle" }, "\"\n",
                "export stack_name=\"", { "Ref": "AWS::StackName" }, "\"\n",
                "export vpc_id=\"", { "Ref": "VPC" }, "\"\n",
                "export subnet_id=\"", { "Ref": "Subnet" }, "\"\n",
                "export region=\"", { "Ref": "AWS::Region" }, "\"\n",
                "export world_cidr=\"0.0.0.0/0\"\n",
                "export HOME=/root\n",
                "# Update Jenkins with some build parameters\n",
                "sed -i.bak \"s#VPCID_TOKEN#${vpc_id}#g\" /var/lib/jenkins/config.xml\n",
                "sed -i.bak \"s#SUBNETID_TOKEN#${subnet_id}#g\" /var/lib/jenkins/config.xml\n",
                "sed -i.bak \"s#STACK_NAME_TOKEN#${stack_name}#g\" /var/lib/jenkins/config.xml\n",
                "sed -i.bak \"s#REGION_TOKEN#${region}#g\" /var/lib/jenkins/config.xml\n",
                "sed -i.bak \"s#0.0.0.0/0#${world_cidr}#g\" /var/lib/jenkins/config.xml\n",
                "# Restart Jenkins\n",
                "service jenkins restart\n",
                "sleep 30s\n",
                "# Install ZAP - Penetration Test\n",
                "mkdir -p /opt/ZAP\n",
                "pushd /opt/ZAP\n",
                "  wget https://github.com/zaproxy/zaproxy/releases/download/2.5.0/ZAP_2.5.0_Linux.tar.gz\n",
                "  tar xf ZAP_2.5.0_Linux.tar.gz\n",
                "  pushd ZAP_2.5.0\n",
                "    nohup ./zap.sh -daemon -port 9000 -config api.disablekey=true &\n",
                "  popd\n",
                "popd\n",
                "# Install Nginx for proxying Jenkins\n",
                "apt-get update\n",
                "apt-get install -y nginx python-dev\n",
                "# Configure Nginx for proxying Jenkins\n",
                "pushd /etc/nginx/sites-available\n",
                "  wget https://raw.githubusercontent.com/stelligent/aws-devsecops-workshop/master/provisioning/misc/nginx/jenkins.conf\n",
                "  rm -f default\n",
                "popd\n",
                "pushd /etc/nginx/sites-enabled\n",
                "  rm -f default\n",
                "  ln -fvs /etc/nginx/sites-available/jenkins.conf ./jenkins",
                "popd\n",
                "# Ensure Nginx is running for proxying Jenkins\n",
                "service nginx restart\n",
                "# Install apache benchmark - Easy Capacity Testing\n",
                "apt-get install -y apache2-utils\n",
                "apt-get install -y nodejs\n",
                "pip install --upgrade awscli\n",
                "# Create the CloudFormation wait handle JSON\n",
                "cat > /tmp/cfn-success <<CFNSUCCESS\n",
                "{\n",
                "   \"Status\" : \"SUCCESS\",\n",
                "   \"Reason\" : \"Configuration Complete\",\n",
                "   \"UniqueId\" : \"$(uuidgen)\",\n",
                "   \"Data\" : \"Application has completed configuration.\"\n",
                "}\n",
                "CFNSUCCESS\n",
                "# Emit success to CloudFormation\n",
                "curl -T /tmp/cfn-success \"${wait_handle}\"\n"
              ]
            ]
          }
        }
      }
    },
    "JenkinsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "aws-devsecops-jenkins-role",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:CreateStack",
                    "cloudformation:DescribeStacks",
                    "cloudformation:DescribeStackResource",
                    "cloudformation:UpdateStack",
                    "cloudtrail:DescribeTrails",
                    "cloudtrail:GetTrailStatus",
                    "cloudtrail:LookupEvents",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:AuthorizeSecurityGroupEgress",
                    "ec2:CreateKeyPair",
                    "ec2:CreateTags",
                    "ec2:CreateSecurityGroup",
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeImages",
                    "ec2:DescribeInstances",
                    "ec2:DescribeVpcs",
                    "ec2:RevokeSecurityGroupEgress",
                    "ec2:RunInstances",
                    "ec2:DeleteKeyPair",
                    "ec2:DeleteSecurityGroup",
                    "ec2:TerminateInstances",
                    "config:DescribeComplianceByConfigRule",
                    "config:DescribeComplianceByResource",
                    "config:DescribeConfigRuleEvaluationStatus",
                    "config:DescribeConfigRules",
                    "config:DescribeConfigurationRecorders",
                    "config:DescribeConfigurationRecorderStatus",
                    "config:DescribeDeliveryChannels",
                    "config:DescribeDeliveryChannelStatus",
                    "config:GetDiscoveredResourceCounts",
                    "config:GetComplianceDetailsByConfigRule",
                    "config:GetComplianceDetailsByResource",
                    "config:GetComplianceSummaryByConfigRule",
                    "config:GetComplianceSummaryByResourceType",
                    "config:GetResourceConfigHistory",
                    "config:GetResources",
                    "config:GetTagKeys",
                    "config:ListDiscoveredResources",
                    "config:DeliverConfigSnapshot",
                    "inspector:CreateResourceGroup",
                    "inspector:CreateAssessmentTarget",
                    "inspector:CreateAssessmentTemplate",
                    "inspector:DescribeAssessmentRuns",
                    "inspector:DescribeCrossAccountAccessRole",
                    "inspector:DescribeFindings",
                    "inspector:DescribeRulesPackages",
                    "inspector:ListRulesPackages",
                    "inspector:ListFindings",
                    "inspector:StartAssessmentRun",
                    "inspector:StopAssessmentRun",
                    "inspector:DeleteAssessmentRun",
                    "inspector:DeleteAssessmentTarget",
                    "inspector:DeleteAssessmentTemplate",
                    "tag:GetResources",
                    "tag:GetTagKeys"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "JenkinsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "JenkinsRole" } ]
      }
    },
    "JenkinsDNS" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneName" : { "Ref": "TopLevelDomain" },
         "Comment" : "DNS record for DevSecOps Pipeline.",
         "Name" : { "Fn::Join": [ ".", [ "devsecops", { "Ref": "TopLevelDomain" } ] ] },
         "Type" : "A",
         "TTL" : "60",
         "ResourceRecords" : [
            { "Fn::GetAtt" : [ "JenkinsServer", "PublicIp" ] }
         ]
      }
    }
  },
  "Outputs": {
    "InstanceID" : { "Value" : { "Ref" : "JenkinsServer" } },
    "SecurityGroup": { "Value": { "Ref": "JenkinsSecurityGroup" } },
    "JenkinsDNS": { "Value": { "Ref": "JenkinsDNS" } },
    "JenkinsIP": { "Value": { "Fn::GetAtt": [ "JenkinsServer", "PublicIp" ] } }
  }
}
